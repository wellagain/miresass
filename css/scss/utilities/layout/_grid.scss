@mixin grid-item($nth) {
	$item-per-column: $columns / $nth;
	$width: $size-bit * $nth + $margin-bit * ($nth - 1);

	width: $width;

	@if ($item-per-column == round($columns / $nth)) {
		&:nth-of-type(#{$item-per-column}n+#{$item-per-column}) {
			margin-right: 0;
			@include clearafter;
		}
		@include breakpoint(small) {
			$small-item-per-column: $item-per-column / 2;
			$small-width: $size-bit * $nth * 2 + $margin-bit * ($nth * 2 - 1);

			@if ($small-width > 50%) {
				width: 100%;
			}
			@else {
				width: $small-width;
			}

			&:nth-of-type(#{$small-item-per-column}n+#{$small-item-per-column}) {
				margin-right: 0;
				@include clearafter;
			}
		}
		@include breakpoint(mobile) {
			$mobile-item-per-column: $item-per-column / 4;
			$mobile-width: $size-bit * $nth * 4 + $margin-bit * ($nth * 4 - 1);

			@if ($mobile-width > 50%) {
				width: 100%;
			}
			@else {
				width: $mobile-width;
			}

			&:nth-of-type(#{$mobile-item-per-column}n+#{$mobile-item-per-column}) {
				margin-right: 0;
				@include clearafter;
			}
		}
	}
	@else {
		@include breakpoint(small) {
			$left: $columns - $nth;
			$companion-width: $size-bit * $left * 2 + $margin-bit * ($left * 2 - 1);
			$small-width: 100% - $margin-bit - $companion-width;
			@if ($small-width + $margin-bit < 50%) {
				width: 100%;
			}
			@else {
				width: $small-width;
			}
		}
		@include breakpoint(mobile) {
			$left: $columns - $nth;
			$companion-width: $size-bit * $left * 4 + $margin-bit * ($left * 4 - 1);
			$small-width: 100% - $margin-bit - $companion-width;
			@if ($small-width + $margin-bit < 50%) {
				width: 100%;
			}
			@else {
				width: $small-width;
			}
		}
	}
	@include breakpoint(mobile) {
		img {
			max-width: 100%;
		}
	}
}

@for $i from 1 to $columns+1 {
	.col-#{$i} {
		position: relative;
		margin-right: $margin-bit;
		@include grid-item($i);
	}
}

