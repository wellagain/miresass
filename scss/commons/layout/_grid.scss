@import 'commons/utilities/math';

// Returns a list of column number per row for given column count
// e.g. if there's 12 columns in a row, list is 12 6 3 2 1
// use:
// grid-column-count($columns)


@mixin clearing($nth) {
  &:nth-of-type(#{$nth}n+1) {
    margin-left: 0;
  }
}

// Basic width calculator
@function calc-width($nth) {
  @return $size-bit * $nth + $margin-bit * ($nth - 1);
}

// calculate widths
@function column-sizes($list) {
  $result: ();

  @each $item in $list {
    $width: calc-width($item);
    $result: append($result, $width, comma);
  }

  @return $result;
}


$columns: 12 !default;
$grid-columns: get-dividers($columns);            // how many columns in each row? e.g. 12, 6, 4, 3, 2, 1;
$sizes: reverse(column-sizes($grid-columns));     // what is the size of each column? e.g. 6.5% 15% 23.5% 32% 49% 100%;
$list: zip($grid-columns, $sizes, reverse(get-dividers($columns)));                // combining an array. e.g. 12 6.5%, 6 15%, 4 23.5%, 3 32%, 2 49%, 1 100%;


@mixin equal-columns-responsified($array) {
  @each $item in $array {

    $nth: nth($item, 1);                          // determining N, column .s-N is 1/N of 100%
    $size: nth($item, 2);                         // asigning size
    $name: nth($item, 3);
    $normal-size: 1;                              // size for normal screens
    $small-size: 1;                               // size for small screens
    $alt-number: get-dividers($nth);              // if a column is small, determine, how can it be divided for other screens
    $columns-in-normal-screen: 1;
    $columns-in-small-screen: 1;

    %eqsize-#{$name} {
      width: $size;
      @include clearing($nth);

      @include breakpoint(normal) {
        @if length($alt-number) >=2 {
          $columns-in-normal-screen: nth($alt-number, 2);
          $normal-size: calc-width($columns / $columns-in-normal-screen);

          width: $normal-size;
          @include clearing($columns-in-normal-screen);
        }
      }

      @include breakpoint(small) {
        @if length($alt-number) >=3 {
          $columns-in-small-screen: nth($alt-number, 3);
          $small-size: calc-width($columns / $columns-in-small-screen);

          width: $small-size;
          @include clearing($columns-in-small-screen);
        }
      }
    }
  }
}

@mixin custom-size-column($number) {
  width: calc-width($number);
}

// implementation
@include equal-columns-responsified($list);

@for $i from 1 to $columns+1 {
  %size-#{$i} {
    @include custom-size-column($i);
  }
}

// grid helpers
%margin-fix {
  margin-right: - $inline-block-gap;
  margin-left: $margin-bit;
}

%column {
  @include inline-block(top);
  position: relative;
}

%grid-column {
  @extend %column;
  @extend %margin-fix;

  @include breakpoint(mobile) {
    margin-left: 0 !important;
    width: 100%;
  }
}

%grid-first-item {
  margin-left: 0 !important;
}
