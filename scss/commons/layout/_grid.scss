@import 'commons/utilities/math';

// define clearing after columns rules
//
@mixin clearing($nth) {
  &:nth-of-type(#{$nth}n+#{$nth}) {
    margin-right: 0;
  }
}


// define margin setting rules
//
@mixin marginify($size) {
  // if column is full width, no margin required;
  @if $size == 100 {
    margin-right: 0;
  }
  @elseif $size > 57 {
    margin-right: 0;
  }
  @else {
    margin-right: calc(#{$margin-bit} - #{$inline-block-gap});
  }

  &:last-of-type,
  &:last-child {
    margin-right: 0;
  }
}

// Basic grid width calculator
//
@function calc-width($nth) {
  @return $size-bit * $nth + $margin-bit * ($nth - 1);
}

// Calculate width and margins for grid column
//
@mixin custom-size-column($number) {
  $width: calc-width($number);
  width: $width;
  @include marginify($width);
}


// Your grid settings
$columns: 12 !default;

// Calculate how many equal columns can fit in each row? e.g. 12, 6, 4, 3, 2, 1;
$grid-columns: get-dividers($columns);


// Generate placeholders for all columns
//
@for $i from 1 through $columns {
  // check, if column size is among dividers
  $index: index($grid-columns, $i);

  %s-#{$i}-#{$columns} {
    @extend %grid-column;

    // if column is irregular size (is not among dividers), calculate it's size
    @if $index == null {
      @include custom-size-column($i);
    }

    // if column is of regular size, define it's sizes, and clearing rules
    //
    @else {
      // defining normal size and clearing rules
      //
      $in-a-row: $columns / $i;                       // for 1/12 column: 12

      @include custom-size-column($i);
      @include clearing($in-a-row);

      // calculate sizes for normal and small screen sizes
      //
      $column-dividers: get-dividers($in-a-row);      // for 1/12 column: 12, 6, 4, 3, 2, 1;
      $dividers-count: length($column-dividers);      // for 1/12 column: 6;
      $normal-in-a-row: null;
      $small-in-a-row: null;

      @if $dividers-count > 2 {
        $normal-in-a-row:  nth($column-dividers, 2);
        $small-in-a-row:  nth($column-dividers, 3);
      }
      @elseif $dividers-count == 2 {
        $normal-in-a-row:  nth($column-dividers, 1);
        $small-in-a-row:  nth($column-dividers, 2);
      }
      @else {
        $normal-in-a-row: nth($column-dividers, 1);
        $small-in-a-row:  nth($column-dividers, 1);
      }

      // assigning sizes and clearing rules

      @include breakpoint(normal) {
        $normal-width: $columns / $normal-in-a-row;
        @include custom-size-column($normal-width);
        @include clearing($normal-in-a-row);
      }

      @include breakpoint(small) {
        $small-width: $columns / $small-in-a-row;
        @include custom-size-column($small-width);
        @include clearing($small-in-a-row);
      }
    }
  }
}

// grid helpers

%last {
  margin-right: 0 !important;
}

%grid-column {
  @include inline-block(top);
  position: relative;

  @include breakpoint(mobile) {
    margin-right: 0 !important;
    width: 100%;
  }
}


