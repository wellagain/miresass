// These styles are compiled into a grid class system

$columns: 12 !default;
$media: screen !default;

@mixin grid-item($nth) {

	// calculating how many items can be fit into a row
	$item-per-column: $columns / $nth;
	$small-item-per-column: $item-per-column / 2;
	$small-alternative-item-per-column: $item-per-column / 3;
	$mobile-item-per-column: $item-per-column / 4;

	// determine how big is a sibling of big paired blocks
	$companion-nth: $columns - $nth;

	// calculate different sizes for regular, tablet and mobile view.
	$width: $size-bit * $nth + $margin-bit * ($nth - 1);
	$small-width: $size-bit * $nth * 2 + $margin-bit * ($nth * 2 - 1);
	$mobile-width: $size-bit * $nth * 4 + $margin-bit * ($nth * 4 - 1);
	$small-companion-width: $size-bit * $companion-nth * 2 + $margin-bit * ($companion-nth * 2 - 1);
	$mobile-companion-width: $size-bit * $companion-nth * 4 + $margin-bit * ($companion-nth * 4 - 1);


	// set an item width (this is the only one IE8 will ever accept)
	width: $width;


	// if several items of the same class can fill a row without remainder
	@if ($item-per-column == round($columns / $nth)) {
		// start from a new row
		&:nth-of-type(#{$item-per-column}n+#{$item-per-column}) {
			margin-right: 0;
			@include clearafter;
		}

		@if $media == screen {
			@include breakpoint(small) {
				// for tablet view, bigger than half a row items forced to fill whole row
				@if ($width < 32%) {
					width: $small-width;
					&:nth-of-type(#{$small-item-per-column}n+#{$small-item-per-column}) {
						margin-right: 0;
						@include clearafter;
					}
				}

				@else if ($width >= 32% and $width < 75%){
					width: 49%;
					&:nth-of-type(#{$item-per-column}n+#{$item-per-column}) {
						margin-right: $margin-bit;
						&:after {
							clear:none;
						}
					}
					&:nth-of-type(2n+2) {
						margin-right: 0;
						@include clearafter;
					}
				}
				@else {
					width: 100%;
				}
			}
			@include breakpoint(mobile) {
				// for mobile view, bigger than half a row items forced to fill whole row
				@if ($mobile-width > 50%) {
					width: 100%;
				}
				@else {
					width: $mobile-width;
				}
				// start from a new row
				&:nth-of-type(#{$mobile-item-per-column}n+#{$mobile-item-per-column}) {
					margin-right: 0;
					@include clearafter;
				}
			}
		}
	}
	// if several items of the same class cannot fill a row without remainder, calculate its likeliest compainion width and fill the space
	@else {
		@if $media == screen {
			@include breakpoint(small) {
				$small-width: 100% - $margin-bit - $small-companion-width;
				// make sure those items whose companion are forced to fill whole row also fill the row
				@if ($small-width + $margin-bit < 50%) {
					width: 100%;
				}
				@else {
					width: $small-width;
				}
			}
			@include breakpoint(mobile) {
				// make sure those items whose companion are forced to fill whole row also fill the row
				$mobile-width: 100% - $margin-bit - $mobile-companion-width;
				@if ($mobile-width + $margin-bit < 50%) {
					width: 100%;
				}
				@else {
					width: $mobile-width;
				}
			}
		}
	}
}


// compile grid classes col-1, col-2... until col-N, where N is number of columns
@for $i from 1 to $columns+1 {
	.col-#{$i} {
		position: relative;
		margin-right: $margin-bit;
		@include grid-item($i);
		// images in grid system should not exceed it's container
		@if $media == screen {
			@include breakpoint(devices) {
				img {
					max-width: 100%;
				}
			}
		}
	}
}



// grid helpers
.flow-container {
	@include clearfix;
}
.flow {
	display: block;
	float: left;
}
.inblock {
	@include inline-block;
}
.last {
	margin-right: 0 !important;
	@include clearafter;
	& + * {
		clear:both;
	}
}
.full {
	width: 100%;
}