// inline-block driven grid

@import 'commons/utilities/grid-sizing';

$inline-block-gap:          .29rem !default;
$inline-block-gap-flb:      3px !default;


// scss-lint:disable ImportantRule DuplicateProperty

// define clearing after columns rules
//
@mixin clearing($nth) {
  &:nth-of-type(#{$nth}n+#{$nth}) {
    margin-right: 0;
  }
}

@mixin grid-margin($force: false) {

  @if $force == true {
    margin-right: $margin-bit--falback !important;
    margin-right: calc(#{$margin-bit} - #{$inline-block-gap}) !important;
  }

  @else {
    margin-right: $margin-bit--falback;
    margin-right: calc(#{$margin-bit} - #{$inline-block-gap});
  }
}


// Calculate width and margins for grid column
//
@mixin custom-size-column($number) {
  @include calc-size-column($number);
  @include grid-margin;

  &:last-child {
    margin-right: 0;
  }
}


// Generate placeholders for all columns
//
@for $i from 1 through $columns {
  // check, if column size is among dividers
  $index: index($grid-columns, $i);

  %s-#{$i}-#{$columns} {
    @extend %grid-column;

    // if column is irregular size (is not among dividers), calculate it's size
    @if $index == null {
      @include custom-size-column($i);
    }

    // if column is of regular size, define it's sizes, and clearing rules
    //
    @else {
      $in-a-row: $columns / $i;                       // for 1/12 column: 12

      @include custom-size-column($i);
      @include clearing($in-a-row);

      // calculate sizes for normal and small screen sizes
      //
      $column-dividers: get-dividers($in-a-row);      // for 1/12 column: 12, 6, 4, 3, 2, 1;
      $dividers-count: length($column-dividers);      // for 1/12 column: 6;
      $normal-in-a-row: null;
      $small-in-a-row: null;

      @if $dividers-count > 2 {
        $normal-in-a-row:  nth($column-dividers, 2);
        $small-in-a-row:  nth($column-dividers, 3);
      }
      @elseif $dividers-count == 2 {
        $normal-in-a-row:  nth($column-dividers, 1);
        $small-in-a-row:  nth($column-dividers, 2);
      }
      @else {
        $normal-in-a-row: nth($column-dividers, 1);
        $small-in-a-row:  nth($column-dividers, 1);
      }

      // assigning sizes and clearing rules

      @include breakpoint(normal) {
        $normal-width: $columns / $normal-in-a-row;
        @include custom-size-column($normal-width);
        @include clearing($normal-in-a-row);
      }

      @include breakpoint(small) {
        $small-width: $columns / $small-in-a-row;
        @include custom-size-column($small-width);
        @include clearing($small-in-a-row);
      }
    }
  }
}


// simple grid column sizing mixin
// use:
// @include grid(7 true, 6 true, 6 true, 12);
// where number is a column count, and true or false is for grid margin

@mixin grid(
  $size--wide,
  $size--normal: $size--wide,
  $size--small: $size--wide,
  $size--mobile: $size--wide
  ) {

  @extend %grid-column;
  @include custom-size-column(nth($size--wide, 1));

  @if length($size--wide) > 1 {
    @if nth($size--wide, 2) == true {
      @include grid-margin(false);
    }
    @else {
      margin-right: 0;
    }
  }

  @include breakpoint(normal) {
    @include custom-size-column(nth($size--normal, 1));

    @if length($size--normal) > 1 {
      @if nth($size--normal, 2) == true {
        @include grid-margin(false);
      }

      @else {
        margin-right: 0;
      }
    }
  }

  @include breakpoint(small) {
    @include custom-size-column(nth($size--small, 1));

     @if length($size--small) > 1 {
      @if nth($size--small, 2) == true {
        @include grid-margin(false);
      }

      @else {
        margin-right: 0;
      }
    }
  }

  @include breakpoint(mobile) {
    @include custom-size-column(nth($size--mobile, 1));
    margin-right: 0;
  }
}


// grid helpers
// use this for known last item in irregular size grid column
%last {
  margin-right: 0 !important;
}

// use this to force a grid margin on irregular size grid column
%grid-margin {
  @include grid-margin(true);
}

// automatically added on all grid column placeholders
%grid-column {
  @include inline-block(top);
  position: relative;

  @include breakpoint(mobile) {
    margin-right: 0 !important;
    width: 100%;
  }
}

// scss-lint:enable ImportantRule DuplicateProperty


